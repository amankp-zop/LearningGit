// Code generated by MockGen. DO NOT EDIT.
// Source: service/task/interface.go
//
// Generated by this command:
//
//	mockgen -source=service/task/interface.go -destination=service/task/mock_task_service.go -package=taskservice
//

// Package taskservice is a generated GoMock package.
package taskservice

import (
	taskmodel "assignment8/models/task"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockTaskRepositoryPort is a mock of TaskRepositoryPort interface.
type MockTaskRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryPortMockRecorder
	isgomock struct{}
}

// MockTaskRepositoryPortMockRecorder is the mock recorder for MockTaskRepositoryPort.
type MockTaskRepositoryPortMockRecorder struct {
	mock *MockTaskRepositoryPort
}

// NewMockTaskRepositoryPort creates a new mock instance.
func NewMockTaskRepositoryPort(ctrl *gomock.Controller) *MockTaskRepositoryPort {
	mock := &MockTaskRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepositoryPort) EXPECT() *MockTaskRepositoryPortMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskRepositoryPort) CreateTask(c *gofr.Context, task *taskmodel.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", c, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepositoryPortMockRecorder) CreateTask(c, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepositoryPort)(nil).CreateTask), c, task)
}

// DeleteTask mocks base method.
func (m *MockTaskRepositoryPort) DeleteTask(c *gofr.Context, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", c, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskRepositoryPortMockRecorder) DeleteTask(c, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskRepositoryPort)(nil).DeleteTask), c, taskID)
}

// GetTasksByUserID mocks base method.
func (m *MockTaskRepositoryPort) GetTasksByUserID(c *gofr.Context, userID int) ([]taskmodel.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserID", c, userID)
	ret0, _ := ret[0].([]taskmodel.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUserID indicates an expected call of GetTasksByUserID.
func (mr *MockTaskRepositoryPortMockRecorder) GetTasksByUserID(c, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserID", reflect.TypeOf((*MockTaskRepositoryPort)(nil).GetTasksByUserID), c, userID)
}

// MarkTaskComplete mocks base method.
func (m *MockTaskRepositoryPort) MarkTaskComplete(c *gofr.Context, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTaskComplete", c, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTaskComplete indicates an expected call of MarkTaskComplete.
func (mr *MockTaskRepositoryPortMockRecorder) MarkTaskComplete(c, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskComplete", reflect.TypeOf((*MockTaskRepositoryPort)(nil).MarkTaskComplete), c, taskID)
}

// UpdateTask mocks base method.
func (m *MockTaskRepositoryPort) UpdateTask(c *gofr.Context, task *taskmodel.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", c, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskRepositoryPortMockRecorder) UpdateTask(c, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepositoryPort)(nil).UpdateTask), c, task)
}
