// Code generated by MockGen. DO NOT EDIT.
// Source: handler/task/interface.go
//
// Generated by this command:
//
//	mockgen -source=handler/task/interface.go -destination=handler/task/mock_task_handler.go -package=taskhandler
//

// Package taskhandler is a generated GoMock package.
package taskhandler

import (
	taskmodel "assignment8/models/task"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockTaskServicePort is a mock of TaskServicePort interface.
type MockTaskServicePort struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServicePortMockRecorder
	isgomock struct{}
}

// MockTaskServicePortMockRecorder is the mock recorder for MockTaskServicePort.
type MockTaskServicePortMockRecorder struct {
	mock *MockTaskServicePort
}

// NewMockTaskServicePort creates a new mock instance.
func NewMockTaskServicePort(ctrl *gomock.Controller) *MockTaskServicePort {
	mock := &MockTaskServicePort{ctrl: ctrl}
	mock.recorder = &MockTaskServicePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServicePort) EXPECT() *MockTaskServicePortMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskServicePort) CreateTask(c *gofr.Context, task *taskmodel.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", c, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskServicePortMockRecorder) CreateTask(c, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskServicePort)(nil).CreateTask), c, task)
}

// DeleteTask mocks base method.
func (m *MockTaskServicePort) DeleteTask(c *gofr.Context, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", c, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskServicePortMockRecorder) DeleteTask(c, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskServicePort)(nil).DeleteTask), c, taskID)
}

// GetTasksForUser mocks base method.
func (m *MockTaskServicePort) GetTasksForUser(c *gofr.Context, userID int) ([]taskmodel.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksForUser", c, userID)
	ret0, _ := ret[0].([]taskmodel.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksForUser indicates an expected call of GetTasksForUser.
func (mr *MockTaskServicePortMockRecorder) GetTasksForUser(c, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksForUser", reflect.TypeOf((*MockTaskServicePort)(nil).GetTasksForUser), c, userID)
}

// MarkTaskComplete mocks base method.
func (m *MockTaskServicePort) MarkTaskComplete(c *gofr.Context, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTaskComplete", c, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTaskComplete indicates an expected call of MarkTaskComplete.
func (mr *MockTaskServicePortMockRecorder) MarkTaskComplete(c, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskComplete", reflect.TypeOf((*MockTaskServicePort)(nil).MarkTaskComplete), c, taskID)
}

// UpdateTask mocks base method.
func (m *MockTaskServicePort) UpdateTask(c *gofr.Context, task *taskmodel.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", c, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskServicePortMockRecorder) UpdateTask(c, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskServicePort)(nil).UpdateTask), c, task)
}
